import { HASH_ALGO } from './helpers';
interface PasswordHashOptions {
    length: number;
}
/**
 * hash a password
 * @param password
 * @param salt
 * @param options
 * @version 1.0.0
 */
export declare const passwordHash: (password: string, salt: string, options?: PasswordHashOptions) => Promise<string | Error>;
/**
 * check if password match hash value
 * @param password password to check
 * @param hash hashed value to compare in most cases hashed password saved on some storage like DB..
 * @param salt salt used to hash the origin value in hash param
 * @version 1.0.0
 */
export declare const passwordVerify: (password: string, hash: string, salt: string, options?: PasswordHashOptions) => Promise<boolean>;
export interface Password_HashOptions extends PasswordHashOptions {
    algo: HASH_ALGO;
}
/**
 * hash a string passed as param
 * @param password
 * @returns {Promise<string>}
 */
export declare const password_hash: (password: string, options?: Password_HashOptions) => Promise<string | Error>;
/**
 * compare a password with hashed value
 * @param password
 * @param hash hashed password to compare with
 * @param options list of optional options
 * @returns {Promise<boolean>} true if match otherwise false
 * @throws error in case something went wrong
 */
export declare const password_verify: (password: string, hash: string, options?: Password_HashOptions) => Promise<boolean>;
export {};
//# sourceMappingURL=index.d.ts.map